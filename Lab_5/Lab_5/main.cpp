//   Написать шаблонный класс DataManager<T> для специфической работы с набором
// однотипных данных(максимальная вместимость равна 64 элементам).В набор можно
// добавлять данные(метод push(T elem) для добавления одного элемента и метод
// push(T elems[], size_t n) для добавления группы из n элементов), считывать без
// извлечения(метод T peek()) и извлекать(метод T pop()) по некоторым алгоритмам
// (в соответствии с вариантом, приложение А).Если набор заполнен на 100 % и
// поступает команда добавления нового элемента(ов), то данные полностью
// выгружаются(дописываются) в специальный файл dump.dat, а сам массив очищается
// и новые данные записываются уже в обновленный набор.Если из массива удаляется
// последний элемент, то он заполняется ранее выгруженными в файл данными(если
// файл не пуст).
//   Необходимо также реализовать явную специализацию шаблонного класса для
// символьного типа.В ней надо запрограммировать следующее : при добавлении
// символа в набор все знаки пунктуации должны автоматически заменяться на символ
// подчеркивания; добавить методы char popUpper() и char popLower(), которые
// позволяют при извлечении символа из набора привести его к верхнему или нижнему
// регистру, соответственно.
//   В функции main() продемонстрировать применение шаблонного класса DataManager
// для типов int, double и char.Элементы контейнера должны выводиться на консоль с
// помощью std::ostream_iterator.
//							Вариант 7.
//  push() : данные пишутся на свое место в наборе (данные должны упорядочиваться по убыванию);
//  peek() : возвращает второй элемент в наборе или 0, если элементов в наборе меньше 2;
//  pop()  : извлекает первый элемент.
#include "DataManager.h"
int main() {
	DataManager<int> data_int;
	data_int.push(10);
	data_int.push(55);
	data_int.push(55);
	data_int.push(16);
	data_int.push(19);
	data_int.pop();
	data_int.print();
	std::cout << std::endl;

	DataManager<double> data_double;
	double* array = new double[] {0.1, 0.4, 0.1567, 0.9, 1.543, -14.44, -1, 22};
	data_double.push(array, 8);
	data_double.print();
	std::cout << std::endl;
	std::cout << std::endl;

	DataManager<char> data_char;
	char* string = new char[] {'C', 'l', 'a', 's', 's', '-', '?', 'S'};
	data_char.push(string, 8);
	std::cout << data_char.popUpper() << std::endl;
	std::cout << data_char.popLower() << std::endl;
	data_char.print();
	return 0;
}